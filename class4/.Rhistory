which
pwd
pwd()
setwd('~/Documents/GeneralAssembly/GADS4/hw1/')
titanic = read.csv('data/train.csv',head = TRUE)
gbars <- ggplot(titanic,aes(x = sex))         # Create gg w/ aes
library(ggplot2)
library(gridExtra)
library(plyr)
gbars <- ggplot(titanic,aes(x = sex))         # Create gg w/ aes
genderbars <- ggplot(titanic,aes(x = sex,fill = factor(survived))) + geom_bar()
n_survived <- count(titanic,vars = c("survived", "sex"))
rm(ls())
rm(list = ls())
d <- data.frame(a=c("1,000","2,000"))
str(d)
typeof(d)
??str
as.char(d$a)
?as.charater
?as.character
as.character(d$a)
??split
strsplit(as.character(d$a),',')
?strjoin
??join
str_c(strsplit(as.character(d$a),','))
?str_c
?str
/paste
?paste
paste(strsplit(as.character(d$a),','))
as.character(d$a)
paste(strsplit(as.character(d$a),','))
?as.character
??factor
?as.numeric
?gsub
gsub(',',d$a,'')
gsub(',','',d$a)
as.numeric(gsub(',','',d$a))
d$a <- as.numeric(gsub(',','',d$a))
d$a
sum(d$a)
d <- data.frame(a=c("1,030","2,004"))
d$a <- as.numeric(gsub(',','',d$a))
sum(d$a)
?lapply
x <- c(3,4)
y <- c(5,6)
x-y
(x-y)^2
sum((x-y)^2)
sqrt(sum((x-y)^2))
classdistance <- function(x,y)
return sqrt(sum((x-y)^2))
classdistance <- function(x,y)
sqrt(sum((x-y)^2))
classdistance(x,y)
classdistance <- function(x,y)
sqrt(sum((x-y)^2))
setwd('~/Documents/GeneralAssembly/GADS4/class4/')
batting <- read.csv('Batting.csv',head=T)
players <- read.csv('Master.csv')
salary <- read.csv('Salaries.csv')
batting_salary <- merge(batting, salary)
data <- merge(players, batting_salary)
model_data <- data[, c('HR', 'RBI', 'R', 'G', 'height', 'weight', 'salary', 'yearID')]
model_data <- data[, c('HR', 'RBI', 'R', 'G', 'height', 'weight', 'salary', 'yearID')]
model_data <- model_data[complete.cases(model_data),] #This removes any rows that had an NA value
head(model_data)
model_data <- data[, c('HR', 'RBI', 'SB','R', 'G', 'height', 'weight', 'salary', 'yearID')]
model_data <- model_data[complete.cases(model_data),] #This removes any rows that had an NA value
head(model_data)
model <- lm(salary ~ HR + RBI, data= model_data)
summary(model)
training <- model_data[model_data$yearID == 2011,]
str(training)
head(training)
test <- model_data[mode_data$yearID == 2012,]
test <- model_data[model_data$yearID == 2012,]
nrow(test)
mse <- function(x, y) {
return(mean( (x-y)^2 ))
}
mae <- function(x, y) {
return(mean( abs(x-y)))
}
ls()
?ls()
objects()
typeof(mae)
class(mae)
?test.predict
test.predict() <- predict(model, test)
model <- lm(salary ~ HR + RBI, data= model_data)
model <- lm(salary ~ HR + RBI, data= training)
test.predict() <- predict(model, test)
test.predict <- predict(model, test)
plot(test.predict,test$salary)
mae(test.predict,test$salary)
hist(test$salary)
model <- lm(salary ~ HR + RBI + R +g, data= training)
model <- lm(salary ~ HR + RBI + R + G, data= training)
test.predict <- predict(model, test)
plot(test.predict,test$salary)
mae(test.predict,test$salary)
mse(test.predict,test$salary)
mae(test.predict,test$salary)
?log
model <- lm(log(salary) ~ HR + RBI + R + G, data= training)
test.predict <- predict(model, test)
plot(test.predict,test$salary)
mae(test.predict,test$salary)
plot(test.predict,log(test$salary)
mae(test.predict,test$salary)
plot(test.predict,log(test$salary))
mae(test.predict,test$salary)
model_data$Games50 <- (model_data$G > 50)
??logistic
?glmnet
library(glmnet)
install.packages('glmnet')
?rm
?glmnet
library(glmnet)
?glmnet
model.reg <- glmnet(as.matrix(training[,c('HR','RBI')]),as.matrix(training$salary))
?cv.glmnet
?glmnet
test.reg <- predit(model.reg,as.matrix(test[,c('HR','RBI')]),s=model.reg$lambda.min)
test.reg <- predict(model.reg,as.matrix(test[,c('HR','RBI')]),s=model.reg$lambda.min)
head(test.reg)
str(model.reg)
str(model.reg)
?predict
q1 <- c(11,12,13,14,15,16)
freq <- c(10,9,11,14,10,6)
total <- q1 * freq
total
sum(total)
sum(total)/60.
?rep
?stddev
??stddev
?stdev
??standard
?mean
?median
?variance
?var
?apply
apply(q1,1,rep(q1,3))
apply(q1,1,rep
)
apply(q1,2,rep)
?rep
apply(q1,2,rep(x,2))
apply(q1,2,rep(x,times =2))
apply(q1,2,sum)
apply(q1,1,sum)
apply(q1,0,sum)
q1 <- c(11,12,13,14,15,16)
apply(q1,1,sum)
lapply(q1,1,sum)
?lapply
?ddply
?lapply
?replicate
rbind(q1,freq)
cbind(q1,freq)
?rep
?for
end
??for
)
for (element,num in q1,freq) {
for indx in 1:6) {
for (indx in 1:6) {
rep(q1[indx],num[indx])
}
for (indx in 1:6) {
rep(q1[indx],freq[indx])
}
?append
output <- c()
output <- c()
for (indx in 1:6) {
output <- c(output,rep(q1[indx],freq[indx]))
}
output
mean(output)
sd(output)
median(output)
quartile(output)
?quantile
quantile(output)
hist(output)
hist(output,bin=1)
?hist
hist(output,breaks=6)
hist(output,breaks=7)
hist(output,breaks=3)
hist(output,breaks=6)
?hist
density(output)
plot(density(output))
plot(freq)
coins <- c(coins,rep(0,53),rep(1,47))
coins <- c()
coins <- c(coins,rep(0,53),rep(1,47))
mean(coins)
sd(coins)
median(coins)
quantile(coins)
